@page "/calculator"
@attribute [Authorize]
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using db_testiä.Models
@using db_testiä.Services
@inject UserService UserService
@inject UserDataService UserDataService

<section class="calculator-card">
    <div class="card-intro">
        <h1>Salary Calculator</h1>
        <p class="lead">Calculate your net salary based on your profile information. Update values below or modify them in your profile.</p>
    </div>

    @if (isLoading)
    {
        <p class="muted">Loading your data...</p>
    }
    else if (!string.IsNullOrEmpty(loadError))
    {
        <div class="alert alert--error">@loadError</div>
    }
    else
    {
        <div class="calculator-sections">
            <!-- Input Section -->
            <div class="input-section">
                <h2>Salary Information</h2>

                <div class="form-group">
                    <label>Base Salary (€/month)</label>
                    <input type="number" step="0.01" @bind="BaseSalary" @bind:event="oninput" class="form-input" />
                </div>

                <div class="form-group">
                    <label>Tax Percentage (%)</label>
                    <input type="number" step="0.1" @bind="TaxPercentage" @bind:event="oninput" class="form-input" />
                </div>

                <h3>Active Bonuses</h3>
                @if (ActiveBonuses.Count == 0)
                {
                    <p class="muted">No active bonuses. Add bonuses in your profile.</p>
                }
                else
                {
                    <div class="bonus-list">
                        @foreach (var bonus in ActiveBonuses)
                        {
                            <div class="bonus-item-compact">
                                <span class="bonus-category">@bonus.Category</span>
                                <span class="bonus-amount">+€@bonus.Amount.ToString("N2")</span>
                            </div>
                        }
                    </div>
                }

                <div class="calculation-options">
                    <h3>Calculation Period</h3>
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="period" value="monthly" checked="@(calculationPeriod == "monthly")" @onchange="HandleMonthlyChange" />
                            Monthly
                        </label>
                        <label class="radio-label">
                            <input type="radio" name="period" value="yearly" checked="@(calculationPeriod == "yearly")" @onchange="HandleYearlyChange" />
                            Yearly
                        </label>
                    </div>
                </div>

                <button class="primary" @onclick="Calculate">Recalculate</button>
            </div>

            <!-- Results Section -->
            <div class="results-section">
                <h2>Calculation Results</h2>

                <div class="result-card result-card--highlight">
                    <div class="result-label">Gross Salary</div>
                    <div class="result-value">€@GrossSalary.ToString("N2")</div>
                    <div class="result-note">Base + Bonuses</div>
                </div>

                <div class="result-breakdown">
                    <div class="breakdown-item">
                        <span class="breakdown-label">Base Salary:</span>
                        <span class="breakdown-value">€@BaseSalary.ToString("N2")</span>
                    </div>
                    <div class="breakdown-item">
                        <span class="breakdown-label">Total Bonuses:</span>
                        <span class="breakdown-value breakdown-value--positive">+€@TotalBonuses.ToString("N2")</span>
                    </div>
                </div>

                <div class="result-card result-card--warning">
                    <div class="result-label">Tax Amount</div>
                    <div class="result-value">€@TaxAmount.ToString("N2")</div>
                    <div class="result-note">@TaxPercentage.ToString("N1")% of gross</div>
                </div>

                <div class="result-card result-card--success">
                    <div class="result-label">Net Salary</div>
                    <div class="result-value result-value--large">€@NetSalary.ToString("N2")</div>
                    <div class="result-note">Take-home pay (@calculationPeriod)</div>
                </div>

                @if (calculationPeriod == "monthly")
                {
                    <div class="yearly-projection">
                        <h3>Yearly Projection</h3>
                        <div class="projection-grid">
                            <div class="projection-item">
                                <span class="projection-label">Gross/Year:</span>
                                <span class="projection-value">€@((GrossSalary * 12).ToString("N2"))</span>
                            </div>
                            <div class="projection-item">
                                <span class="projection-label">Net/Year:</span>
                                <span class="projection-value">€@((NetSalary * 12).ToString("N2"))</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</section>

<style>
    .calculator-card {
        width: 90vw;
        max-width: 1200px;
        margin: 1rem auto;
        background: #ffffff;
        padding: 2rem 3rem;
        border-radius: 20px;
        box-shadow: 0 18px 36px rgba(15, 23, 42, 0.12);
    }

    .card-intro h1 {
        margin: 0 0 0.75rem;
        color: #1f2937;
        text-decoration: underline 2px rgba(141, 168, 145, 0.5);
        text-underline-offset: 0.5rem;
    }

    .card-intro .lead {
        margin: 0 0 2rem;
        color: #4b5563;
    }

    .calculator-sections {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 3rem;
    }

    .input-section,
    .results-section {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

        .input-section h2,
        .results-section h2 {
            margin: 0 0 0.5rem;
            color: #1f2937;
            font-size: 1.4rem;
            border-bottom: 2px solid rgba(141, 168, 145, 0.3);
            padding-bottom: 0.5rem;
        }

        .input-section h3 {
            margin: 1rem 0 0.5rem;
            color: #1f2937;
            font-size: 1.1rem;
        }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.35rem;
    }

        .form-group label {
            font-weight: 600;
            color: #1f2937;
        }

    .form-input {
        padding: 0.65rem 0.75rem;
        border: 1px solid #d1d5db;
        border-radius: 10px;
        font-size: 0.95rem;
        background: #f9fafb;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

        .form-input:focus {
            outline: none;
            border-color: #298353;
            box-shadow: 0 0 0 3px rgba(41, 131, 83, 0.1);
        }

    .bonus-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .bonus-item-compact {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.6rem 1rem;
        background: #f0fdf4;
        border: 1px solid #86efac;
        border-radius: 8px;
    }

    .bonus-category {
        font-weight: 600;
        color: #166534;
    }

    .bonus-amount {
        color: #15803d;
        font-weight: 700;
    }

    .calculation-options {
        margin-top: 1rem;
    }

        .calculation-options h3 {
            margin: 0 0 0.75rem;
            font-size: 1rem;
            color: #1f2937;
        }

    .radio-group {
        display: flex;
        gap: 1.5rem;
    }

    .radio-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
        color: #374151;
        cursor: pointer;
    }

        .radio-label input[type="radio"] {
            cursor: pointer;
        }

    .primary {
        margin-top: 1rem;
        background: linear-gradient(135deg, #298353, #182848);
        color: #fff;
        border: none;
        padding: 0.75rem 1.75rem;
        border-radius: 10px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 600;
        transition: background 0.2s ease, transform 0.1s ease;
    }

        .primary:hover {
            background: rgba(29, 104, 64, 0.8);
            transform: translateY(-1px);
        }

    .result-card {
        padding: 1.5rem;
        border-radius: 12px;
        background: #f9fafb;
        border: 2px solid #e5e7eb;
    }

    .result-card--highlight {
        background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
        border-color: #7dd3fc;
    }

    .result-card--warning {
        background: linear-gradient(135deg, #fef3c7, #fde68a);
        border-color: #fbbf24;
    }

    .result-card--success {
        background: linear-gradient(135deg, #d1fae5, #a7f3d0);
        border-color: #34d399;
    }

    .result-label {
        font-size: 0.9rem;
        font-weight: 600;
        color: #6b7280;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-bottom: 0.5rem;
    }

    .result-value {
        font-size: 2rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 0.25rem;
    }

    .result-value--large {
        font-size: 2.5rem;
        color: #047857;
    }

    .result-note {
        font-size: 0.85rem;
        color: #6b7280;
        font-style: italic;
    }

    .result-breakdown {
        padding: 1rem;
        background: #f9fafb;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
    }

    .breakdown-item {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
        border-bottom: 1px solid #e5e7eb;
    }

        .breakdown-item:last-child {
            border-bottom: none;
        }

    .breakdown-label {
        color: #6b7280;
        font-weight: 500;
    }

    .breakdown-value {
        font-weight: 600;
        color: #1f2937;
    }

    .breakdown-value--positive {
        color: #15803d;
    }

    .yearly-projection {
        margin-top: 1rem;
        padding: 1.25rem;
        background: #f9fafb;
        border-radius: 12px;
        border: 1px solid #e5e7eb;
    }

        .yearly-projection h3 {
            margin: 0 0 1rem;
            font-size: 1.1rem;
            color: #1f2937;
        }

    .projection-grid {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .projection-item {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
    }

    .projection-label {
        color: #6b7280;
        font-weight: 500;
    }

    .projection-value {
        font-weight: 700;
        color: #1f2937;
    }

    .muted {
        color: #6b7280;
    }

    .alert {
        margin-top: 1rem;
        padding: 1rem 1.25rem;
        border-radius: 12px;
        font-weight: 600;
    }

    .alert--error {
        background: #ffe4e6;
        color: #be123c;
        border: 1px solid rgba(190, 18, 60, 0.35);
    }

    @@media (max-width: 968px) {
        .calculator-sections {
            grid-template-columns: 1fr;
            gap: 2rem;
        }

        .calculator-card {
            padding: 1.75rem 1.5rem;
        }

        .result-value {
            font-size: 1.75rem;
        }

        .result-value--large {
            font-size: 2rem;
        }
    }
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private string? userId;
    private bool isLoading = true;
    private string? loadError;

    private decimal baseSalary;
    private decimal BaseSalary
    {
        get => baseSalary;
        set
        {
            if (baseSalary != value)
            {
                baseSalary = value;
            }
        }
    }

    private decimal taxPercentage;
    private decimal TaxPercentage
    {
        get => taxPercentage;
        set
        {
            if (taxPercentage != value)
            {
                taxPercentage = value;
            }
        }
    }

    private List<BonusInfo> ActiveBonuses { get; } = new();
    private string calculationPeriod = "monthly";

    private decimal TotalBonuses => ActiveBonuses.Sum(b => b.Amount);
    private decimal GrossSalary => BaseSalary + TotalBonuses;
    private decimal TaxAmount => GrossSalary * (TaxPercentage / 100m);
    private decimal NetSalary => GrossSalary - TaxAmount;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var principal = authState.User;

        userId = principal.FindFirst("UserId")?.Value ?? principal.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            loadError = "Unable to determine the current user.";
            isLoading = false;
            return;
        }

        try
        {
            var data = await UserDataService.GetOrCreateForUserAsync(userId);
            baseSalary = data.BaseSalary;
            taxPercentage = data.TaxPercentage;

            ActiveBonuses.Clear();
            if (data.Bonuses is not null)
            {
                foreach (var bonus in data.Bonuses.Where(b => b.IsActive))
                {
                    ActiveBonuses.Add(new BonusInfo
                    {
                        Category = bonus.Category,
                        Amount = bonus.Amount
                    });
                }
            }

            loadError = null;
        }
        catch (Exception ex)
        {
            loadError = $"Failed to load your salary data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void Calculate()
    {
        StateHasChanged();
    }

    private void HandleMonthlyChange()
    {
        if (calculationPeriod != "monthly")
        {
            calculationPeriod = "monthly";
            if (baseSalary > 0)
            {
                baseSalary /= 12;
            }
            StateHasChanged();
        }
    }

    private void HandleYearlyChange()
    {
        if (calculationPeriod != "yearly")
        {
            calculationPeriod = "yearly";
            baseSalary *= 12;
            StateHasChanged();
        }
    }

    private class BonusInfo
    {
        public string Category { get; set; } = string.Empty;
        public decimal Amount { get; set; }
    }
}