@page "/"
@page "/users"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Nav

<div class="page-wrapper">
    <nav class="sidebar">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/users">Users</a></li>
        </ul>
    </nav>

    <div class="page-container">
        <h3>Users</h3>

        <form class="user-form">
            <input @bind="newUser.Name" placeholder="Name" />
            <input type="number" @bind="newUser.Age" placeholder="Age" />
            <input type="password" @bind="newUser.Password" placeholder="Password" />
            <button type="button" @onclick="CreateUser">Add</button>
        </form>

        <ul class="user-list">
            @foreach (var u in users)
            {
                <li>
                    <span>@u.Name (@u.Age)</span>
                    <button type="button" @onclick="@(() => DeleteUser(u.Id!))">Delete</button>
                </li>
            }
        </ul>
    </div>
</div>

<style>
    .page-wrapper {
        display: flex;
        min-height: 100vh;
        font-family: Arial, sans-serif;
    }

    .sidebar {
        width: 200px;
        padding: 1rem;
        background: linear-gradient(180deg, #4b6cb7, #182848);
        color: #fff;
    }

    .sidebar ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .sidebar li {
        margin-bottom: 1rem;
    }

    .sidebar a {
        color: #fff;
        text-decoration: none;
    }

    .page-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-top: 2rem;
    }

    .user-form {
        display: flex;
        flex-direction: column;
        width: 300px;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .user-form input {
        padding: 0.5rem;
    }

    .user-list {
        list-style: none;
        padding: 0;
    }

    .user-list li {
        display: flex;
        justify-content: space-between;
        width: 300px;
        margin-bottom: 0.5rem;
        background-color: #f0f0f0;
        padding: 0.5rem;
        border-radius: 4px;
    }
</style>

@code {
    private HttpClient http = default!;
    private List<User> users = new();
    private UserCreateDto newUser = new();

    protected override async Task OnInitializedAsync()
    {
        http = ClientFactory.CreateClient();
        http.BaseAddress = new Uri(Nav.BaseUri);
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await http.GetFromJsonAsync<List<User>>("api/users") ?? new();
    }

    private async Task CreateUser()
    {
        await http.PostAsJsonAsync("api/users", newUser);
        newUser = new UserCreateDto();
        await LoadUsers();
    }

    private async Task DeleteUser(string id)
    {
        await http.DeleteAsync($"api/users/{id}");
        await LoadUsers();
    }
}
